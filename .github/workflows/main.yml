name: Ubuntu SSH via Ngrok

on: workflow_dispatch

jobs:
  ssh:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH server and user
        run: |
          sudo apt update
          sudo apt install -y openssh-server wget unzip jq net-tools python3

          # Enable and start SSH
          sudo systemctl enable ssh
          sudo systemctl start ssh

          # Create user 'hydra' with password 'root@hydra'
          sudo useradd -m hydra
          echo "hydra:root@hydra" | sudo chpasswd
          echo "hydra" | sudo tee /etc/hostname
          sudo hostnamectl set-hostname hydra

          # Allow password login
          sudo sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config
          echo "UsePAM yes" | sudo tee -a /etc/ssh/sshd_config
          echo "ChallengeResponseAuthentication no" | sudo tee -a /etc/ssh/sshd_config
          sudo systemctl restart ssh

          # Save the public key to a file accessible by HTTP
          echo "${{ secrets.SSH_PUBLIC_KEY }}" | sudo tee /home/hydra/hydra_key.pub
          sudo chown hydra:hydra /home/hydra/hydra_key.pub

          # Create password-protected HTTP server script
          cat << 'EOF' | sudo tee /home/hydra/auth_http_server.py
import http.server
import socketserver
import base64

PORT = 8000
USERNAME = "hydra"
PASSWORD = "root@hydra"

class AuthHandler(http.server.SimpleHTTPRequestHandler):
    def do_AUTHHEAD(self):
        self.send_response(401)
        self.send_header('WWW-Authenticate', 'Basic realm="SSH Public Key"')
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        auth_header = self.headers.get('Authorization')
        if auth_header is None:
            self.do_AUTHHEAD()
            self.wfile.write(b'Authentication required.')
            return
        auth_type, encoded = auth_header.split(' ', 1)
        if auth_type.lower() == 'basic':
            decoded = base64.b64decode(encoded).decode('utf-8')
            username, password = decoded.split(':', 1)
            if username == USERNAME and password == PASSWORD:
                return http.server.SimpleHTTPRequestHandler.do_GET(self)
        self.do_AUTHHEAD()
        self.wfile.write(b'Authentication failed.')

with socketserver.TCPServer(("", PORT), AuthHandler) as httpd:
    print(f"Serving at port {PORT}")
    httpd.serve_forever()
EOF

          # Run the password-protected HTTP server in background
          cd /home/hydra
          nohup python3 auth_http_server.py &

      - name: Install and start Ngrok TCP tunnel
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok tcp 22 &

      - name: Show SSH and Public Key download details
        run: |
          sleep 15
          NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          HOST=$(echo $NGROK_URL | sed -e 's/tcp:\/\///' | cut -d ":" -f 1)
          PORT=$(echo $NGROK_URL | cut -d ":" -f 3)
          echo ""
          echo "✅ SSH Server is ready!"
          echo "------------------------------------"
          echo "🌐 Host/IP: $HOST"
          echo "🔌 Port:    $PORT"
          echo "👤 User:    hydra"
          echo "🔑 Pass:    root@hydra"
          echo "📟 SSH Command:"
          echo "ssh hydra@$HOST -p $PORT"
          echo "------------------------------------"
          echo ""
          echo "🌐 Public SSH key available at (Basic Auth required):"
          echo "http://$HOST:8000/hydra_key.pub"
          echo "Username: hydra"
          echo "Password: root@hydra"
          echo "------------------------------------"

      - name: Keep Runner Alive with Interactive Extra Time
        run: |
          echo "⏳ Keeping the server alive for 8 hours..."
          sleep $((60 * 60 * 8))

          echo ""
          echo "⏰ Soon your server will close & all data will be removed soon."
          echo -n "Do you need extra time? (yes/no): "
          read answer

          if [[ "$answer" =~ ^([Yy][Ee][Ss]|[Yy])$ ]]; then
            echo -n "Enter extra time in hours (min 1, max 5): "
            read extra_time
            if [[ $extra_time =~ ^[0-9]+([.][0-9]+)?$ ]] && (( $(echo "$extra_time >= 1" | bc -l) )) && (( $(echo "$extra_time <= 5" | bc -l) )); then
              extra_seconds=$(echo "$extra_time * 3600" | bc | cut -d '.' -f1)
              echo "⏳ Keeping server alive for extra $extra_time hours..."
              sleep $extra_seconds
            else
              echo "Invalid input or out of range. Running apt update before shutdown..."
              sudo apt update
              echo "Starting 20 seconds countdown before shutdown..."
              for i in {20..1}; do
                echo "Time up shutting down in $i seconds..."
                sleep 1
              done
              exit 0
            fi
          else
            echo "No extra time given. Running apt update before shutdown..."
            sudo apt update
            echo "Starting 20 seconds countdown before shutdown..."
            for i in {20..1}; do
              echo "Time up shutting down in $i seconds..."
              sleep 1
            done
            exit 0
          fi
