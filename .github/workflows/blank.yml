name: SSH Server with Ngrok and Auth HTTP Server

on:
  workflow_dispatch:

jobs:
  setup-ssh-server:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y openssh-server wget unzip jq net-tools python3 bc

      - name: Create hydra user and setup SSH
        run: |
          sudo useradd -m hydra || true
          echo "hydra:root@hydra" | sudo chpasswd
          sudo mkdir -p /home/hydra/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" | sudo tee /home/hydra/.ssh/authorized_keys
          sudo chown -R hydra:hydra /home/hydra/.ssh
          sudo chmod 700 /home/hydra/.ssh
          sudo chmod 600 /home/hydra/.ssh/authorized_keys
          sudo systemctl enable ssh
          sudo systemctl restart ssh

      - name: Save public key for HTTP access
        run: |
          echo "${{ secrets.SSH_PUBLIC_KEY }}" | sudo tee /home/hydra/hydra_key.pub
          sudo chown hydra:hydra /home/hydra/hydra_key.pub

      - name: Create auth HTTP server script
        run: |
          sudo bash -c "cat > /home/hydra/auth_http_server.py << 'EOF'
import http.server
import socketserver
import base64
import os

PORT = 8000
USERNAME = "hydra"
PASSWORD = "root@hydra"

class AuthHandler(http.server.SimpleHTTPRequestHandler):
    def do_AUTHHEAD(self):
        self.send_response(401)
        self.send_header('WWW-Authenticate', 'Basic realm="SSH Public Key"')
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        auth_header = self.headers.get('Authorization')
        if auth_header is None:
            self.do_AUTHHEAD()
            self.wfile.write(b'Authentication required.')
            return
        try:
            auth_type, encoded = auth_header.split(' ', 1)
            if auth_type.lower() == 'basic':
                decoded = base64.b64decode(encoded).decode('utf-8')
                username, password = decoded.split(':', 1)
                if username == USERNAME and password == PASSWORD:
                    return http.server.SimpleHTTPRequestHandler.do_GET(self)
        except Exception as e:
            pass
        self.do_AUTHHEAD()
        self.wfile.write(b'Authentication failed.')

if __name__ == "__main__":
    os.chdir("/home/hydra")
    with socketserver.TCPServer(("", PORT), AuthHandler) as httpd:
        print(f"Serving at port {PORT}")
        httpd.serve_forever()
EOF
          sudo chown hydra:hydra /home/hydra/auth_http_server.py
          cd /home/hydra
          nohup python3 auth_http_server.py &

      - name: Install and start Ngrok
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok tcp 22 &

      - name: Show SSH connection info
        run: |
          sleep 15
          NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          HOST=$(echo $NGROK_URL | sed -e 's/tcp:\/\///' | cut -d ":" -f 1)
          PORT=$(echo $NGROK_URL | cut -d ":" -f 3)
          echo ""
          echo "âœ… SSH Server Ready"
          echo "Host: $HOST"
          echo "Port: $PORT"
          echo "User: hydra"
          echo "Pass: root@hydra"
          echo "SSH Command: ssh hydra@$HOST -p $PORT"
          echo "Public key download (Basic Auth):"
          echo "http://$HOST:8000/hydra_key.pub"
          echo "User: hydra / Pass: root@hydra"

      - name: Keep alive
        run: |
          echo "Server will run for 8 hours..."
          sleep $((60*60*8))
