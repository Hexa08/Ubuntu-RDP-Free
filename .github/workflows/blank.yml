name: SSH Server with Ngrok and Auth HTTP Server

on:
  workflow_dispatch:

jobs:
  setup-ssh-server:
    runs-on: ubuntu-latest

    steps:
      - name: Update and install dependencies
        run: |
          sudo apt update
          sudo apt install -y openssh-server wget unzip jq net-tools python3 bc

      - name: Create hydra user and setup SSH
        run: |
          sudo useradd -m hydra || true
          echo "hydra:root@hydra" | sudo chpasswd

          sudo mkdir -p /home/hydra/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" | sudo tee /home/hydra/.ssh/authorized_keys
          sudo chown -R hydra:hydra /home/hydra/.ssh
          sudo chmod 700 /home/hydra/.ssh
          sudo chmod 600 /home/hydra/.ssh/authorized_keys

          sudo systemctl enable ssh
          sudo systemctl restart ssh

      - name: Save the public key to a file accessible by HTTP
        run: |
          echo "${{ secrets.SSH_PUBLIC_KEY }}" | sudo tee /home/hydra/hydra_key.pub
          sudo chown hydra:hydra /home/hydra/hydra_key.pub

      - name: Create password-protected HTTP server script
        run: |
          echo 'import http.server
import socketserver
import base64
import os

PORT = 8000
USERNAME = "hydra"
PASSWORD = "root@hydra"

class AuthHandler(http.server.SimpleHTTPRequestHandler):
    def do_AUTHHEAD(self):
        self.send_response(401)
        self.send_header("WWW-Authenticate", "Basic realm=\"SSH Public Key\"")
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        auth_header = self.headers.get("Authorization")
        if auth_header is None:
            self.do_AUTHHEAD()
            self.wfile.write(b"Authentication required.")
            return
        try:
            auth_type, encoded = auth_header.split(" ", 1)
            if auth_type.lower() == "basic":
                decoded = base64.b64decode(encoded).decode("utf-8")
                username, password = decoded.split(":", 1)
                if username == USERNAME and password == PASSWORD:
                    return http.server.SimpleHTTPRequestHandler.do_GET(self)
        except Exception as e:
            pass
        self.do_AUTHHEAD()
        self.wfile.write(b"Authentication failed.")

if __name__ == "__main__":
    os.chdir("/home/hydra")
    with socketserver.TCPServer(("", PORT), AuthHandler) as httpd:
        print(f"Serving at port {PORT}")
        httpd.serve_forever()' | sudo tee /home/hydra/auth_http_server.py

          sudo chown hydra:hydra /home/hydra/auth_http_server.py
          cd /home/hydra
          nohup python3 auth_http_server.py &

      - name: Install and start Ngrok TCP tunnel
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok tcp 22 &

      - name: Show SSH and Public Key download details
        run: |
          sleep 15
          NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          HOST=$(echo $NGROK_URL | sed -e 's/tcp:\/\///' | cut -d ":" -f 1)
          PORT=$(echo $NGROK_URL | cut -d ":" -f 3)
          echo ""
          echo "✅ SSH Server is ready!"
          echo "------------------------------------"
          echo "🌐 Host/IP: $HOST"
          echo "🔌 Port:    $PORT"
          echo "👤 User:    hydra"
          echo "🔑 Pass:    root@hydra"
          echo "📟 SSH Command:"
          echo "ssh hydra@$HOST -p $PORT"
          echo "------------------------------------"
          echo ""
          echo "🌐 Public SSH key available at (Basic Auth required):"
          echo "http://$HOST:8000/hydra_key.pub"
          echo "Username: hydra"
          echo "Password: root@hydra"
          echo "------------------------------------"

      - name: Keep server alive with timeout and extend option
        shell: bash
        run: |
          echo "⏳ Keeping the server alive for 8 hours..."
          sleep $((60*60*8))

          echo "⚠️ Soon your server will be closed & all data will be removed soon."
          if [ -t 0 ]; then
            read -p "Do you need extra time? (yes/no): " answer
          else
            answer="no"
          fi

          if [[ "$answer" == "yes" ]]; then
            if [ -t 0 ]; then
              read -p "How many extra hours do you want? (min 1, max 5, decimals allowed): " extra_hours
            else
              extra_hours="1"
            fi
            if [[ "$extra_hours" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
              extra_minutes=$(echo "$extra_hours * 60" | bc)
              extra_seconds=$(echo "$extra_minutes * 60" | bc | cut -d'.' -f1)
              if (( $(echo "$extra_hours >= 1" | bc -l) )) && (( $(echo "$extra_hours <= 5" | bc -l) )); then
                echo "⏳ Extending server life by $extra_hours hours..."
                sleep $extra_seconds
                echo "⏰ Time up shutting down now."
                exit 0
              else
                echo "Invalid number. It must be between 1 and 5 hours."
              fi
            else
              echo "Invalid input format."
            fi
          fi

          echo "No extra time given. Starting 20 seconds countdown before shutdown..."
          for i in {20..1}; do
            echo "Time up shutting down in $i seconds..."
            sleep 1
          done
